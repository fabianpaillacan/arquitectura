# Explicación detallada de src/interfaces/api.py

Este archivo es el núcleo del backend de tu sistema de paquetería. Aquí se definen los modelos, endpoints, autenticación, permisos y la lógica de notificaciones en tiempo real con WebSockets.

---

## 1. Estructura general
- Usa **FastAPI** para crear la API.
- Usa **SQLModel** para los modelos y la base de datos.
- Define roles, permisos y lógica de negocio.
- Implementa WebSockets para notificaciones en tiempo real.

---

## 2. Modelos principales
- **Usuario**: representa a cada persona en el sistema (cliente, operador, repartidor, admin).
- **Paquete**: cada envío registrado.
- **Evento**: cada cambio de estado de un paquete.
- **AsignacionPaquete**: relación entre paquetes y repartidores.

---

## 3. Roles y permisos
- **Roles**: cliente, operador, repartidor, admin.
- Cada endpoint verifica los permisos del usuario antes de permitir la acción.
- Decorador `@verificar_permiso` asegura que solo los roles correctos accedan a cada endpoint.

---

## 4. Autenticación y login
- Endpoint `/auth/login`:
  - Recibe email y contraseña.
  - Busca el usuario en la base de datos.
  - Verifica la contraseña y si el usuario está activo.
  - Devuelve un "token" (en desarrollo, es el id del usuario; en producción sería un JWT) y los datos del usuario.

**Ejemplo:**
```python
@app.post("/auth/login")
def login(data: UsuarioLogin, session: Session = Depends(get_session)):
    user = session.exec(select(Usuario).where(Usuario.email == data.email)).first()
    if not user or not verify_password(data.password, user.password_hash):
        raise HTTPException(status_code=401, detail="Credenciales inválidas")
    if not user.activo:
        raise HTTPException(status_code=401, detail="Usuario inactivo")
    return {"access_token": user.id, ...}
```

---

## 5. Endpoints principales
- **/paquetes**: registrar, listar, consultar y actualizar paquetes.
  - Los clientes solo ven sus paquetes.
  - Los operadores y admins ven todos.
  - Los repartidores ven los asignados.
- **/usuarios**: solo para admin, lista todos los usuarios.
- **/dashboard**: estadísticas personalizadas según el rol.
- **/paquetes/asignar**: asigna un paquete a un repartidor.

---

## 6. Ejemplo de endpoint protegido
```python
@app.get("/paquetes/{codigo}")
@verificar_permiso("ver_mis_paquetes")
async def consultar_paquete(codigo: str, usuario: Usuario = Depends(get_current_user), session: Session = Depends(get_session)):
    paquete = session.get(Paquete, codigo)
    if not paquete:
        raise HTTPException(status_code=404, detail="Paquete no encontrado")
    if usuario.rol == Rol.CLIENTE and paquete.cliente_id != usuario.id:
        raise HTTPException(status_code=403, detail="No puedes ver este paquete")
    return build_paquete_read(paquete, session)
```

---

## 7. WebSockets y notificaciones en tiempo real
- **ConnectionManager** administra todas las conexiones WebSocket.
- Permite enviar mensajes a todos los usuarios o a uno específico.
- Ejemplo: cuando se asigna un paquete, el repartidor recibe una notificación instantánea.

**Resumen visual:**
```
Usuario (web) <--- WebSocket ---> Backend (api.py) <--- DB
```

---

## 8. Resumen visual de flujo
```mermaid
graph TD;
    A[Cliente] -- login --> B[API /auth/login]
    B -- token --> A
    A -- consulta paquetes --> C[API /paquetes]
    C -- datos --> A
    D[Operador/Admin] -- asigna paquete --> E[API /paquetes/asignar]
    E -- notifica --> F[Repartidor (WebSocket)]
```

---

## 9. Consejos y mejores prácticas
- En producción, usa JWT reales para los tokens.
- Limita los permisos de cada rol.
- Usa WebSockets para notificaciones importantes.
- Valida siempre los datos en backend y frontend.

---

## 10. Glosario rápido
- **Endpoint**: URL de la API que realiza una acción.
- **Token**: clave que identifica y autoriza a un usuario.
- **WebSocket**: canal de comunicación en tiempo real.
- **Permiso**: autorización para realizar una acción.

---

Este archivo te servirá como guía rápida y didáctica para entender y modificar tu backend. Si necesitas ejemplos de uso o tienes dudas sobre algún fragmento, ¡puedes consultarme! 