================================================================================
SISTEMA DE SEGUIMIENTO DE PAQUETER√çA - GU√çA DID√ÅCTICA Y RESUMIDA
================================================================================

üìã RESUMEN GENERAL
------------------
Sistema web para gestionar y rastrear paquetes con roles diferenciados, actualizaciones en tiempo real y una interfaz moderna y adaptativa. El dise√±o prioriza la seguridad, la experiencia de usuario y la escalabilidad.

================================================================================
1. ARQUITECTURA DEL SISTEMA
================================================================================

- **Frontend (HTML/JS/Bootstrap):** Interfaz web adaptativa, validaci√≥n, WebSockets, navegaci√≥n por rol.
- **Backend (FastAPI + SQLModel):** API RESTful, autenticaci√≥n, l√≥gica de negocio, WebSockets, persistencia.
- **Base de datos (SQLite):** Usuarios, paquetes, eventos, asignaciones, auditor√≠a completa.

*Diagrama simplificado:*
Cliente/Operador/Repartidor (Web) ‚áÑ WebSockets ‚áÑ API FastAPI ‚áÑ Base de datos

================================================================================
2. FLUJOS PRINCIPALES DEL SISTEMA
================================================================================

- **Autenticaci√≥n:** Login, validaci√≥n de sesi√≥n, adaptaci√≥n de interfaz por rol.
- **Registro de paquete:** Formulario, generaci√≥n de c√≥digo, evento inicial, notificaci√≥n en tiempo real.
- **Actualizaci√≥n de estado:** Selecci√≥n de paquete, cambio de estado, evento, notificaci√≥n.
- **Asignaci√≥n de repartidor:** Selecci√≥n, desactivaci√≥n de asignaciones previas, notificaci√≥n personalizada.
- **Seguimiento cliente:** Ingreso de c√≥digo, validaci√≥n de propiedad, historial visual.

================================================================================
3. FUNCIONES JAVASCRIPT CLAVE
================================================================================

- **toastAlert(msg, type):** Muestra alertas temporales.
- **pill(estado):** Genera badges visuales para estados.
- **mostrarInterfazPorRol(rol):** Adapta la UI seg√∫n el rol.
- **conectarWebSocket(userId):** Establece y mantiene la conexi√≥n WebSocket.
- **fetchAuth(url, options):** Peticiones autenticadas con token.
- **mostrarLogin()/mostrarAplicacion():** Alterna entre login y app principal.
- **cerrarSesion():** Limpia sesi√≥n y cierra WebSocket.
- **loadRecentUpdates(), loadDashboard():** Carga datos din√°micos.
- **createHistoryModal(), showHistoryModal():** Muestra historial de eventos.

*Todos los formularios y acciones relevantes tienen listeners y validaci√≥n.*

================================================================================
4. ENDPOINTS DE LA API
================================================================================

- **/auth/register:** Registrar usuario
- **/auth/login:** Login
- **/paquetes:** Registrar/listar paquetes
- **/paquetes/estado:** Actualizar estado
- **/paquetes/asignar:** Asignar repartidor
- **/dashboard:** Estad√≠sticas
- **/ws/{user_id}:** WebSocket por usuario
- **/usuarios:** Gesti√≥n de usuarios (admin)
- **/health:** Estado del sistema

================================================================================
5. ESTRUCTURA DE DATOS PRINCIPAL
================================================================================

- **Usuario:** id, email, nombre, password_hash, rol, zona_id, activo, fecha_registro
- **Paquete:** codigo, empresa, destinatario, direccion, telefono, ruta, estado, ubicacion, cliente_id
- **Evento:** id, fecha, estado, ubicacion, paquete_codigo, usuario_id, comentario
- **AsignacionPaquete:** id, paquete_codigo, repartidor_id, fecha_asignacion, activa
- **Rol (enum):** cliente, operador, repartidor, admin

================================================================================
6. INTERFACES DE USUARIO Y EXPERIENCIA
================================================================================

- **Login:** Formulario simple, validaci√≥n, persistencia de sesi√≥n.
- **Cliente:** Seguimiento, mis paquetes, compra simplificada.
- **Operador:** Registro, actualizaci√≥n, asignaci√≥n, dashboard.
- **Repartidor:** Paquetes asignados, actualizaci√≥n, ruta, dashboard.
- **Admin:** Gesti√≥n de usuarios, reportes, dashboard global.
- **Elementos comunes:** Header, navegaci√≥n din√°mica, notificaciones, modales, timeline visual.

================================================================================
7. ESTADOS DE PAQUETES Y AUDITOR√çA
================================================================================

- **Estados:** procesando, en_bodega, en_transito, en_reparto, entregado, devuelto
- **Flujo:** procesando ‚Üí en_bodega ‚Üí en_transito ‚Üí en_reparto ‚Üí entregado
- **Auditor√≠a:** Cada cambio de estado genera un evento con usuario, fecha y comentario.

================================================================================
8. MANEJO DE ERRORES Y SEGURIDAD
================================================================================

- **Errores comunes:** 401 (auth), 403 (permisos), 404 (no encontrado), 400 (validaci√≥n)
- **Frontend:** Toasts, validaci√≥n de formularios, spinners de carga.
- **Backend:** Validaci√≥n Pydantic, decoradores de permisos, auditor√≠a de acciones.
- **Seguridad:** Contrase√±as hasheadas, validaci√≥n de entrada, CORS, protecci√≥n CSRF impl√≠cita.

================================================================================
9. TECNOLOG√çAS Y HERRAMIENTAS
================================================================================

- **Frontend:** HTML5, CSS3, JS ES6+, Bootstrap 5, Bootstrap Icons
- **Backend:** Python 3.8+, FastAPI, SQLModel, SQLAlchemy, Pydantic, Uvicorn
- **Base de datos:** SQLite (por defecto), PostgreSQL (opcional)
- **Comunicaci√≥n:** WebSockets, HTTP/HTTPS, JSON
- **Despliegue:** Docker, Docker Compose, variables de entorno

================================================================================
10. ROLES, PERMISOS Y AUTENTICACI√ìN
================================================================================

- **Cliente:** ver_mis_paquetes, seguimiento_cliente
- **Operador:** registrar_paquetes, actualizar_estado, asignar_repartidor, ver_todos_paquetes
- **Repartidor:** ver_mis_paquetes, actualizar_estado, ver_ruta
- **Admin:** * (todos los permisos)
- **Permisos:** Decoradores en endpoints, validaci√≥n de propiedad, auditor√≠a.
- **Autenticaci√≥n:** Token simulado (JWT), almacenado en localStorage, verificaci√≥n autom√°tica.

================================================================================
11. WEBSOCKETS Y TIEMPO REAL
================================================================================

- **ConnectionManager:** Maneja conexiones, env√≠a mensajes a usuarios espec√≠ficos, reconexi√≥n autom√°tica.
- **Tipos de mensajes:** paquete_registrado, paquete_actualizado, paquete_asignado.
- **Ventajas:** Comunicaci√≥n en tiempo real, menor latencia, notificaciones espec√≠ficas, escalabilidad preparada.

================================================================================
üéØ RESUMEN DE FUNCIONALIDADES Y SOPORTE
================================================================================

- **Implementado:**
  - Autenticaci√≥n y roles, WebSockets, interfaz adaptativa, API RESTful, auditor√≠a, dashboard, historial, asignaci√≥n, seguimiento.
- **T√©cnico:**
  - C√≥digo modular, manejo de errores, documentaci√≥n, escalabilidad, seguridad, responsive, persistencia de sesi√≥n.
- **Pr√≥ximos pasos:**
  - JWT real, tests autom√°ticos, rate limiting, logging estructurado, microservicios.
- **Soporte:**
  - Revisar documentaci√≥n, logs, conexiones WebSocket, permisos, integridad de base de datos.

================================================================================ 